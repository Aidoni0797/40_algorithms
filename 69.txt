Использование стратегии полного перебора

Первое решение, которое приходит на ум для задачи TSP, - это использовать полный перебор (brute force,
иначе называемый "метод грубой силы") и попытаться найти кратчайгий путь, при котором коммивояжер посетит
каждый город ровно один раз и вернется в исходный город. Итак, стратегия полного перебора работает 
следующим образом:

1. Рассчитать все возможные маршруты
2. Выбрать среди них кратчайший маршрут.

Проблема в том, что для n числа городов существует(n-1)! возможных маршрутов. Это означает, что пять городов
дадут 4! = 24 маршрута и мы выберем самый короткий из них. Очевидно, что такой метод сработает лишь потому,
что у нас не так много городов. По мере увеличения числа городов полный перебор превращается в неустойчивую
стратегию из-за большого количества перестановок, генерируемых этим методом.

Жавайте посмотрим, как можно реализовать стратегию полного перебора в Python.

Прежде всего обратим внимание, что маршрут {1,2,3} представляет собой маршрут из города 1 в город 2 и город 3. 
Общее расстояние - это все расстояние, пройденное за маршрут. Мы будем считать, что расстояние между городами 
является кратчайшим, то есть евклидовым.

Определим три служебные функции:

- distance_points. Вычисляет абсолютное расстояние между двумя точками;
- distance_tour. Вычисляет общее расстояние, которое коммивояжер должен преодолеть на данном маршруте;
- generate_cities. Случайным образом генерирует набор из n городов, расположенных в прямоугольнике
шириной 500 и высотой 300.

Давайте рассмотрим следующий код:

import random
from itertools import permutations
alltours = permutations

def distance_tour(aTour):
	return sum(distance_points(aTour[i-1], aTour[i])
		for i in range(len(aTour)))

aCity = complex

def distance_points(first, second): return abs(first-second)

def generate_cities(number_of_cities):
	seed=111; width=500; height=300	
	random.seed((number_of_cities, seed))
	return frozenset(aCity(random.randint(1, width), random.randint(1, height))
	for c in range(number_of_cities))

В предыдущем коде мы применили alltours из функции permutations пакета itertools. Мы также представили
расстояние комплексным числом. Это означает следующее:

- вычисление расстояния между двумя городами a and b сводится к distance(a,b);
- мы можем создать n-число городов, просто вызвав generate_cities(n).

Теперь давайте определим функцию brute_force, которая генерирует все возможные маршруты через эти города.

Как только она их сгенерирует, будет выбран маршрут с наименьшим расстоянием:

def brute_force(cities):
	"Создать все возможные маршруты по городам и выбрать самый короткий."
	return shortest_tour(alltours(cities))

def shortest_tour(tours): return min(tours, key=distance_tour)

Далее определим служебные функции для визуализации:

- visualize_tour. Отображает вссе города и связи на конкретном маршруте. Она также показывает город,
с которого начался маршрут.

- visualize_segment. Используется функцией visualize_tour для отображения городов и вязей в сегменте.

Взгляните на код:

%matplotlib inline
import matplotlib.pyplot as plt
def visualize_tour(tour, style='bo-'):
	if len(tour)>1000: plt.figure(figsize=(15,10))
	start = tour[0:1]
	visualize_segment(tour+start, style)
	visualize_segment(start, 'rD'):
def visualize_segment(segment, style='bo-'):
	plt.plot([X(c) for c in segment], [Y(c) for c in segment], style, clip_on=False)
	plt.axis('scaled')
	plt.axis('off')

def X(city): "X axis"; return city.real
def Y(city): "Y axis"; return city.imag

Реализуем функцию tsp(), которая выполняет следующие действия:

1. Генерирует маршрут на основе алгоритма и количества запрошенных городов.
2. Вычисляет время, необходимое для выполнения алгоритма.
3. Строит график.

Как только tsp() определена, мы можем использовать ее для создания маршрута.

Обратите внимание, что мы используем функцию tsp() для создания маршрута по 10 городам. Поскольку n = 10,
то мы получим (10-1)! = 362 880 возможных перестановок. Если n увеличивается, количество перестановок резко
возрастает и стратегию полного перебора использовать уже нельзя.
	