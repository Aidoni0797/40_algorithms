Стек

Стек - это линейная структура данных для хранения одномерного списка. Элементы в стеке могут
обрабатываться списка. Элементы в стеке могут обрабатываться по принципу LIFO(Last-In, First-Out:
последним пришел - первым ушел) либо по принципу FILO (First-In, Last-Out: первым пришел - последним ушел)
Порядок добавления и удаления элементов определяет характер стека. Новые элементы могут добавляться и
удаляться только с одного конца списка.

Ниже приведены операции со стеками:

-isEmpty. Возвращает true, если стек пуст;
-push. Добавляет новый элемент;
-pop. Возвращает элемент, добавленный последним, и удаляет его.

Как показано, как операции push() and pop() можно использовать для добавления и удаления данных из стека.

В верхней части показанов использование операции push() для добавления элементов в стек. На шагах операция push()
используется три раза для добавления трех элементов в стек. В нижней части рисунка демонстрируется извлечение
сохраненных значений из стека. На шагх операция pop() используется для извлечения двух элементов из стека
в формате LIFO.

Давайте создадим класс с именем Stack, в котором опишем все операции, связанные с классом stack. Код этого 
класса будет выглядеть следующим образом:

class Stack:
	def __init__(self):	
		self.items = []
	def isEmpty(self):
		return self.items == []
	def push(self, item):
		self.items.append(item)
	def pop(self):
		return self.items.pop()
	def peek(self):
		return self.items[len(self.items)-1]
	def size(self):	
		return len(self.items)

Чтобы поместить четыре элемента в стек, можно использовать следующий код

stack = Stack()
stack.push('Red')
stack.push('Green')
stack.push('Blue')
stack.push('Yellow')

stack.pop()
'Yellow'

stack.isEmpty()
False

Этот код создает стек с четыремя элементами данных.

Временная сложность стеков

Рассмотрим временную сложность стеков, используя "О-большое"

Операция
push

Временная сложность
О(1)

pop O(1)
size O(1)
peek O(1)

Видим, что призводительность этих четырех операций не зависит от размера стека.


Практический пример

Стек часто применяется на практике в качестве структуры данных. Например, он используется для хранения
истории веб-браузера. Другой пример - выполнение операции Undo при работе с текстом.

