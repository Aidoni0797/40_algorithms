Практическое применение - планирование производства с помощью линейного программирования

Рассмотрим практический пример использования линейного программирования для решения реальной задачи.
Предположим, что нам требуется максимизировать прибыль современной фабрики, которая производит два типа роботов:

- Улучшенная модель (А). Робот содержит полный набор функций. Производство каждой единицы улучшенной модели
приносит прибыль в размере 4200 долларов.

- Базовая модель (В). Она обеспечивает только базовую функциональность. Производство каждой единицы базовой модели
приводит к прибыли в размере 2800 долларов.

Для изготовления каждого робота необходимы три типа специалистов и определенное количество дней. Эти данные
представлены в следуюшей таблице.

Робот А улучшенная модель Техник 3 дня Специалист ИИ 4 дня Инженер 4 дня
Робот В базовая модель Техник 2 дня Специалист ИИ 3 дня Инженер 3 дня

Фабрика работает по 30-дневным циклам. Один специалист по ИИ доступен в течение 30 дней в цикле. Каждый из двух
инженеров возьмет по 8 выходных дней в течение 30 дней. Таким образом, инженер доступен только в течние 22 дней 
в цикле. Имеется один техник, доступный в течение 20 дней в 30-дневном цикле.

В таблице показано количество сотрудников, работающих на нашей фабрике.

Количество человек Техник 1 Специалист ИИ 1 Инженер 2
Общее количество дней в цикле Техник 1х20=20 дней Специалист ИИ 1х30=30 дней Инженер 2х22=44 дня 

Смоделировать это можно следующим образом:
- Максимальная прибыль = 4200А+2800В
- Результат зависит от следующих условий:
- А>=0: Количество произведенных улучшенных роботов может быть 0 или более.
- В>=0: Количество произведенных базовых роботов может быть 0 или более.
- 3А+2В<=20: Ограничения, связанные с достпуностью техника.
- 4А+3В<=30: Ограничения, связанные с доступностью специалиста по ИИ
- 4А+3В<=44: Ограничения, связанные с доступностью инженеров.

В первую очередь импортируем библиотеку Python под названием pulp, предназначенную для реализации линейного
программирования:

import pulp

Затем создания экземпляра класса для решения задачи вызовем функцию этой библиотеки - LpProblem. Назовем
экземпляр Profit maximizing problem (задачей максимизации прибыли):


#Создание экземпляра класса для решения задачи
model = pulp.LpProblem("Profit maximising problem", pulp.LpMaximize)

Далее определим две линейные переменные, А и В. Переменная А представляет собой количество произведенных
улучшенных роботов, а переменная В - количество произведенных базовых роботов:

A = pulp.LpVariable('A', lowBound = 0, cat = 'Integer')
B = pulp.LpVariable('B', lowBound = 0, cat = 'Integer')

Определим целевую функцию и ограничения следующим образом:

#Целевая функция

model += 5000 * A + 2500 * B, "Profit"

# Ограничения
model += 3*A+2*B<=20
model += 4*A+3*B<=30
model += 4*A+3*B<=44

Для генерации решения используем функцию solve:

#Решение задачи
model.solv()
pulp.LpStatus[model.status]

Затем выведем значения А и В и значение целевой функции

print(A.varValue)
print(B.varValue)

6.0
1.0

print(pulp.value(model.objective))
32500.0

Линейное программирование широко применяется в обрабатывающей промышленности при подсчете объема продукции, 
необходимой для оптимизации использования доступных ресурсов.

Вот и мы добрались до конца главы! Давайте выведем итоги:

Резюме

В этой главе мы обсудили различные подходы к разработке алгоритма. Мы рассмотрели компромиссы, связанные с выбором
правильной архитектуры алгоритма, и лучшие методы постановки реальной задачи. Мы также узнали, как решить
реальную задау оптмизации. Эти знания могут быть использованы для реализации хорошо проработаных алгоритмов.

В следующей главе мы состредоточимся на графовых алгоритмах. Мы изучим различные способы представления графов
и методы установления отношений соседства между элементами данных для выполнения исследования. Наконец, мы
изучим оптимальные способы поиска информации на графах.

(но iDONi ты ничего не поняла, это плохо)