Жадные алгоритмы
Прежде чем мы погрузися в эту тему, дадим определения двум понятиям:

- Алгоритмические затраты (algorithmic overheads). Всякий раз, когда мы пытаемся найти оптимальное решение
какой-то задачи, это занимает время. По мере того как задачи становятся все более и более сложными,
время поиска оптимального решения также возрастает. Обозначим алгоритмические затраты как сигма r.

- Дельта от оптимального (delta from optimal). Для некоторой задачи оптимизации существует оптимальное решение.
Как правило, мы итеративно оптимизируем решение, используя выбранный алгоритм. Для любой задачи всегда существует
оптимальное решение. Как правило, мы итеративно оптимизируем решение, используя выбранный алгоритм. Для любой
задачи всегда существует идеальное решение, называемое оптимальным решением. Как уже говорилось, если классифицировать
задачу,может оказаться, что оптимальное решение неизвестно или что для его расчета и проверки потребуется
неоправданно много времени. Предпологая, что оптимальное регение известно, разницу между ним и текущим
решением на i-й итерации мы называем дельтой от оптимального и представляем как дельта i.

Для решения комплексных задач нам доступны две возможные стратегии:

- Стратегия 1. Потратить больше времени на поиск решения, наиболее близкого к оптимальному, чтобы дельта i
оказалось как можно меньше.

- Стратегия 2. Минимизировать алгоритмические затраты сигма i и на скорую руку выбрать работоспособное 
решение.

Жадные алгоритмы основаны на второй стратегии, в которой мы не прилагаем усилий для поиска наилучшего 
решения и вместо этого минимизируем затраты алгоритма.

Жадный алгоритм - это быстрая и простая стратегия поиска глобального оптимального значения для
многоступенчатых задач. Мы выбираем локальные оптимальные значения, но не проверяем, являются ли они при этом
глобально оптимальными. Обычно жадный алгоритм не приводит к значению, которое можно считать глобально
оптимальным (если только нам не повезет). Однако поиск глобального оптимального значения - непростая задача.
Следовательно, жадный алгоритм работает быстрее по сравнению с алгоритмами "разделяй и властвуй" и алгоритмами
динамического программирования.

Как правило, жадный алгоритм состоит из следующих шагов:
1. Предположим, что у нас есть набор данных D, из которого мы выберем элемент к.

2. Предположим, что вариантом решения (или сертификатом) выступает S. Рассмотрим выозможность включения к
в решение S. Если включение возможно, то решением будет Union(S, e).

3. Повторяем процесс до тех пор, пока S не заполнится или D не окажется исчерпанным.