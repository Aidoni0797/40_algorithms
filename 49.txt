Сортировка вставками

Основная идея сортировки вставками заключается в том, что на каждой итерации мы удаляем элемент
из имеющейся у нас структуры данных, а затем вставляем его в нужную позицию. Именно поэтому алгоритм называется 
сортировкой вставками (insertion sort). На первой итерации мы сортируем два элемента данных. Затем мы
расширяем выборку: берем тертий элемент и находим для него позицию согласно его значению. Алгоритм
выполняется до тех пор, пока все элементы не будут перемещены в правильное положение. Данный процесс
показан на следующей диаграмме.

Алгоритм сортировки вставками на Python выглядит так:

def InsertionSort(list):
	for i in range(1, len(list)):
		j = i-1
		element_next = list[i]
		while (list[j]>element_next) and (j>=0):
			list[j+1] = list[j]
			j = j-1
		list[j+1] = element_next
	return list

Обратите внимание, что в основном цикле мы проходим по всему списку. В каждой итерации двумя соседними
элементами являются list[j] (текущий элемент) и list[i](следующий элемент).

В выражениях list[j]>element_next> и j>=0 мы сравниваем текущий элемент со следующим.

Давайте используем этот код для сортировки массива.

list = [25,26,22,24,27,23,21]

InsertionSort(list)
print(list)

[21,22,23,24,25,26,27]

Рассмотрим производительность алгоритма сортировки вставками.

Из описания алгоритма очевидно, что если структура данных уже отсортирована, он выполняется очень быстро.
Фактически в этом случае сортировка имеет линейное время выполнения, то есть О(n). При наихудшем сценарии
каждый внутренний цикл перемещает все элементы в списке. Если внутренний цикл мы обозначим i, наихудшая
производительность алгоритма сортировки вставками определяется так:

Здесь сложно в блокноте описать.

Как правило,  сортировка вставкой используется в работе с небольшими структурами данных. Для больших 
структур это алгоритм не рекомендуется, поскольку обладает квадратичной средней производительностью.