Бинарный поиск

Необходимым условием для работы алгоритма бинарного поиска является упорядоченность данных. Алгоритм итеративно
делит писок на две части и отслеживает самые низкие и самые высокие индексы, пока не найдет искомое значение

def BinarySearch(list, item):
	first = 0
	last = len(list)-1
	found = False

while first<=last not found:
	midpoint = (first+last)//2
	if list[midpoint] == item:
		found = True
	else:
		if item < list[midpoint]:
			last = midpoint - 1
		else:
			first = midpoint + 1
return found

Вывод выглядит следующим образом

list = [12,33,11,99,22,55,90]
sorted_list = BubbleSort(list)
print(BinarySearch(list, 12))
print(BinarySearch(list, 91))

True
False

Обратите внимание, что вызов функции BinarySearch вернет значение True, если значение найдено в списке ввода.

Производительность бинарного поиска

Бинарный (говорят также "двоичный") поиск назван так потому, что на каждой итерации алгоритм разделляет данные 
на две части. Если данные содержат N элементов, для итерации потребуется максимум O(log N) шагов. Это означает,
что алгоритм имеет время выполнения O(log N).

